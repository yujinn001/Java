package com.sist.main;
/*
 * 		===============> 변수(데이터형), 연산자, 제어문, 배열(2-5장)
 *      1) 클래스
 *         = 클래스 정의하는 방법 (객체지향 프로그램 => 클래스와 클래스의 연관관계)
 *           *** 접근지정어
 *           = 클래스 : public => 메모리 할당용
 *           = 메소드 : 다른 클래스와 통신을 담당 (기능) ==. public
 *           = 변수 : 데이터 보호 ==> private
 *           = 생성자 : 메모리 할당 ==> public
 *               class ClassName
 *               {
 *                 --------------------------
 *                  속성, 필드 ==> 멤버변수
 *                 --------------------------
 *                 
 *                 --------------------------
 *                 
 *                 --------------------------
 *               }
 *         = 객체 생성방법 (new)
 *         = 메소드 정의하는 방법
 *         public static : 객체마다 공통 사용되는 메소드 (데이터베이스)
 *         public final : 종단 메소드 (오버라이딩이 불가능) ==> 사용 빈도가 없다
 *         public abstract : 선언만 하는 메소드 ==> 구현(프로그램에 맞게 구현해서 사용)
 *         ---------------- 추상/ 인터페이스(****)
 *         
 *         = 생성자 정의하는 방법 (291page)
 *           -> 특징
 *              1) 클래스명과 동일
 *              2) 리턴형이 없다 (리턴형이 있는 경우 : 일반 인스턴스메소드)
 *              3) 변수의 초기화 , 메모리에 저장시에 호출되는 메소드
 *                 -----------  시작 동시에 수행하는 기능이 있는 경우
 *                             --------------- 웹, 윈도우(화면UI)
 *                             = 자동 로그인, 쿠키, 윈도우 화면 디자인, 데이터베이스 연결, 서버연결
 *                             = 프로그램 구동 => 첫번째로 호출되는 메소드
 *              4) 오버로딩
 *                  초기화 => 직접 초기화(매개변수가 없는 경우), 사용자로부터 받아서 초기화(매개변수)
 *                  오버로딩( 생성자)
 *                  => 메소드명이 동일
 *                  => 매개변수가 다르다 (갯수, 데이터형)
 *                  => 리턴형은 관계없다
 *                  method() ================> method()
 *                  method(int a)  ==========> method(int)
 *                  method(int b) ===========> method(int)
 *                  method(int a, int b) ====> method(int, int)
 *                  ***** 같은 메소드명을 이용해서 다른 기능을 추가할 때 사용
 *         = this 키워드 : 객체 자신을 => 키워드 (자신)
 *           ---------- this는 모든 클래스에 사용
 *                      ---- 생성자, 인스턴스메소드 (static 메소드는 this가 없다)
 *                      class A
 *                      {
 *                      	public A(A this){}
 *                      	public void display(A this){}
 *                      	public static void aaa(){}
 *                      }
 *                      
 *                      this의 특징 ==> static Object this;
 *                      this 생성 => 객체 생성시에 저장 ==> 생성된 객체의 주소
 *                      A a = new A();
 *                      => 컴파일러 (this = a)
 *                      A b = new A();
 *                      => 컴파일러 (this = b)
 *                      this는 자신의 객체 전송, 지역변수와 구분
 *                      ------------------ 윈도우
 *         
 *      2) 상속 ==> 객체지향의 특성 (데이터보호는 방법, 재사용, 수정, 추가, 공통적인 내용을 모아서 모듈화)
 *                              -------------- ----  ---------  -------------------------------
 *                                캡슐화         상속 /포함  오버라이딩/ 오버로딩(다형성)           추상화
 *                                ** 추상 =>
 *         = 자바 상속의 특징
 *                   = 상속 => extends (확장)
 *                   = 단일 상속만 가능하다
 *                   = 상속내리는 클래스 => 상속받는 클래스 ==> 상속이 있는 경우에만 클래스의 크기 비교만 가능하다
 *         = super 키워드
 *         = 메소드 오버라이딩
 *         = final 키워드
 *         = Object 클래스
 *         
 *      3) 인터페이스 / 추상클래스
 *         = 인터페이스 / 추상클래스의 차이점
 *           목적) 
 *             추상클래스는 상속받아서 확장하는 목적
 *             인터페이스는 관련된 여러개의 클래스를 묶어서 관리 (메소드가 동일)
 *             => 공통점
 *                = 자신이 메모리 할당을 할 수 없다(상속을 통해서 구현후에 사용)
 *                 ------------------------ 하위 클래스를 이용해서 처리
 *             -------------------------------------------------------------
 *                      추상 클래스                      인터페이스
 *             -------------------------------------------------------------
 *             상속       단일 상속                      다중 상속
 *             -------------------------------------------------------------
 *             메소드      구현된 메소드                   구현이 안된 메소드
 *                        구현이 안된 메소드               JDK 1.8이상 ==> 추가 (구현된 메소드 가능)
 *             -------------------------------------------------------------
 *             변수        인스턴스 변수가 존재              인스턴스 변수가 없다
 *                                                     상수형 변수만 설정이 가능
 *             -------------------------------------------------------------
 *             생성자      존재                          존재하지 않는다
 *             -------------------------------------------------------------
 *             상속시 키워드 extends                      implements
 *             -------------------------------------------------------------
 *         = 인터페이스 / 추상클래스 정의
 *           추상 클래스
 *           {
 *           	------------------------------
 *                변수 설정 (인스턴스, static)
 *           	------------------------------
 *                생성자
 *              ------------------------------
 *                구현된 메소드
 *              ------------------------------
 *                구현이 안된 메소드 (추상 메소드) : 공통으로 사용되는 기능
 *                예) 마우스
 *                    => 마우스 클릭
 *                    => 마우스 이동
 *                    => 마우스 드래그
 *                    => 마우스 올리기
 *                    => 마우스 내리기
 *                    
 *                    버튼
 *                    => 클릭, 더블 클릭
 *                    => 프로그램마다 사용방법이 틀리다 (구현이 안된 상태로 선언)
 *              ------------------------------
 *           }
 *         = 인터페이스 / 추상클래스 구현 방법
 *            abstract class A
 *              => aaa(), bbb(), abstract ccc()
 *            => class B extends A
 *            {
 *            	 // 반드시 구현해야 되는 부분
 *               추상메소드(구현이 안된 메소드) => 반드시 구현해서 사용한다
 *            	 ccc(){}
 *               ddd(){} // 추가
 *            } 
 *            // 메모리 할당하는 방법
 *             B b = new B() ==> aaa(),bbb(),ccc(),ddd()
 *             A a = new B() ==> aaa(),bbb(),ccc() ===> ddd()사용불가능
 *             ---------------- 오버라이딩된 메소드를 호출한다
 *             abstract class A
 *             {
 *                 aaa(){1}
 *                 bbb(){2}
 *                 abstract ccc();
 *             }
 *             class B extends A
 *             {
 *             		aaa(){10}
 *             		bbb(){20}
 *                  ccc(){30}
 *                  ddd(){40}
 *                  
 *             }
 *             B b = new B();
 *             b.aaa() ==> 10
 *             b.bbb() ==> 20
 *             b.ccc() ==> 30
 *             b.ddd() ==> 40
 *             
 *             추상클래스는 반드시 상속을 받아서 구현후에 사용한다 => 오버라이딩 기법 
 *            
 *         = 인터페이스 상속
 *         = 1.8 => 인터페이스 default 메소드
 *      
 *      4) 예외처리
 *         = 예외처리 종류
 *         = 자바에서 제공하는 예외 처리 클래스 (계층구조)
 *         = 실행 순서
 *         = 사용자 정의 예외처리 ==> 호출방법
 *     --------------------------------------------- 자바 문법 사항
 *        라이브러리
 *       ----------
 *         Object, String, String Buffer, Math Wrapper ==> java.lang
 *         StringTokenizer, Date, Calendar, SimpleDateFormat
 *         List, Set, Map ===> Java.util
 *         IO
 *         ---------------------------------------------------------
 *         SQL => java.sql
 *         ---------------------------------------------------------
 *         
 */
public class MainClass_클래스 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}















