package com.sist.main;
/*
 *    묶는 방법
 *    변수 : 한계(한개만 저장) => 많은 데이터가 있는 경우에 관리하기 어렵다
 *    배열 : 한계 => 같은 데이터형만 모아서 관리
 *    클래스 : 다른 데이터형(관련)을 묶어서 관리
 *    ----------------------------------> 구조체 (데이터만 묶어서) 데이터를 활용하는 기능 연결
 *            ==> 변수+메소드
 *    기능 : 명령문 => 묶어서 관리 => 구조적인 프로그램 => 메소드
 *    -------------------------------------------------
 *     사용이 쉽게 제작 : 객체지향 프로그램
 *          = 데이터 보호(보안) => 캡슐화
 *          = 재사용(변경이 가능, 변경없이 있는 그대로 사용)
 *                 -------- 상속 -------------------- 포함
 *            class My extends JFrame : 상속 (기존에 있는 클래스를 확장시킨다 => 새로운 클래스 제작)
 *            class My
 *            {
 *             	JFrame f= new JFrame(); // 메소드 변경이 어렵다 has - a
 *            }
 *          = 유지보수 : 수정, 기능 추가 (오버로딩) : 다형성 
 *                    ---- 오버라이딩
 *         ---------------------------------------------- 문법 사항이 아니라 권장 사항
 *         *** 클래스 : 설계도 (객체) => 한개 설계 저장을 여러개 할 수 있다
 *                    new / 리플렉션 => 메모리에 저장하는 방법
 *                           ----- 클래스의 정보를 읽어서 메모리에 방법
 *                                  --------------------------
 *                    new를 사용하면 직접 연결이 있기 때문에 결합성 높은 프로그램
 *                    
 *             구성요소 ==> 무조건 포함 (생성자 => 없는 자동으로 추가 (생성자 : 디폴트 생성자 => 매개변수가 없는 생성자)
 *               멤버변수 : 메모리에 필요한 데이터를 저장할 목적 => 프로그램이 종료할 때까지 저장
 *                        => 전역 변수
 *                    1) 따라 저장 공간 (new) ----------------------- instance 변수
 *                    2) 한개의 공간에만 저장 (모든 객체 공유) ----------- 정적변수(static 변수)
 *               		 => 한개의 회사
 *               			직원 정보(직원마다 따로 저장)
 *               		    회사명(공유)
 *                       => 인스턴스변수 / static변수
 *                          => 데이터 여러개가 모여있다
 *                     형식)
 *                          private 데이터형 변수명
 *                          private  static 데이터형 변수명
 *                          ------------------------------ 은닉화가 기본이다
 *               메소드 : 다른 클래스와 연결할 때 사용 => 동작
 *                      ------------------------- 메세지
 *                      리턴형 (화면UI를 위해서 전송해야 되는 데이터) : 목록(배열)
 *                      매개변수(사용자 요청한 데이터) : => 브라우저에서 전송
 *                         => 페이지 요청, 상세보기, 예매요청...
 *                      => 주고  받기 => 항상 (주소창)
 *                      public 리턴형 메소드(매개변수..)
 *                      {
 *                         인스턴스변수를 활용
 *                      }
 *                      public static  리턴형 메소드(매개변수)
 *                      {
 *                         공유로 사용되는 부분 : 데이터베이스 연결, 한글변환
 *                      }
 *                      
 *               생성자: 초기화(인스턴스 변수) => 필요시에만 사용한다
 *                     ------------------- 명시적인 초기화
 *                     초기화 블록
 *                     인스턴스 블록 : 인스턴스 변수, static변수
 *                     static 블록 : static변수만 가능
 *                     
 *                     class A
 *                     {
 *                      	private int a;
 *                      	private static int b;
 *                      
 *                      	=> 동시에 초기화
 *                      	{
 *                      	}
 *                      	static
 *                      	{
 *                      	}
 *                      ---------------------
 *                          생성자 : 인스턴스 변수 ==> 생성자 호출
 *                     }
 *                     
 *                     초기값 => 명시적 초기값 => static{} => 생성자
 *                     초기값 => 명시적 초기값 => {} => 생성자
 *                             ----------------------------
 *       유지보수를 위한 프로그램 (객체지향 프로그램)       
 *       1) 접근 지정어 : private, protected, default, public (모든 클래스가 접근 가능)
 *                    --------- ---------- --------같은 패키지
 *                    자신의 클래스  같은 패키지
 *                                 상속받은 클래스
 *       2) 캡슐화
 *       3) 상속/포함
 *       4) 수정/추가
 *       5) 관련된 클래스를 묶어서 관리 : 패키지
 *       6) 패키지가 다른 경우에는 import
 *       7) 비정상 종료가 없는 프로그램 (견고성) : 예외처리 (에러복구)
 */
public class MainClass {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
